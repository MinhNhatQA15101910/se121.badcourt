// <auto-generated />
using System;
using FacilityService.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FacilityService.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.3");

            modelBuilder.Entity("FacilityService.Core.Domain.Entities.BusinessLicensePhoto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsMain")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("ManagerInfoId")
                        .HasColumnType("TEXT");

                    b.Property<string>("PublicId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ManagerInfoId");

                    b.ToTable("BusinessLicensePhotos");
                });

            modelBuilder.Entity("FacilityService.Core.Domain.Entities.Facility", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("CourtsAmount")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DetailAddress")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FacebookUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("FacilityName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ManagerInfoId")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("MaxPrice")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("MinPrice")
                        .HasColumnType("TEXT");

                    b.Property<string>("Policy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<float>("RatingAvg")
                        .HasColumnType("REAL");

                    b.Property<int>("State")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalRatings")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ManagerInfoId")
                        .IsUnique();

                    b.ToTable("Facilities");
                });

            modelBuilder.Entity("FacilityService.Core.Domain.Entities.FacilityPhoto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("FacilityId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsMain")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PublicId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FacilityId");

                    b.ToTable("FacilityPhotos");
                });

            modelBuilder.Entity("FacilityService.Core.Domain.Entities.ManagerInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CitizenId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ManagerInfo");
                });

            modelBuilder.Entity("FacilityService.Core.Domain.Entities.BusinessLicensePhoto", b =>
                {
                    b.HasOne("FacilityService.Core.Domain.Entities.ManagerInfo", "ManagerInfo")
                        .WithMany("BusinessLicenseImages")
                        .HasForeignKey("ManagerInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ManagerInfo");
                });

            modelBuilder.Entity("FacilityService.Core.Domain.Entities.Facility", b =>
                {
                    b.HasOne("FacilityService.Core.Domain.Entities.ManagerInfo", "ManagerInfo")
                        .WithOne()
                        .HasForeignKey("FacilityService.Core.Domain.Entities.Facility", "ManagerInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("FacilityService.Core.Domain.Entities.Active", "ActiveAt", b1 =>
                        {
                            b1.Property<Guid>("FacilityId")
                                .HasColumnType("TEXT");

                            b1.HasKey("FacilityId");

                            b1.ToTable("Facilities");

                            b1.WithOwner()
                                .HasForeignKey("FacilityId");

                            b1.OwnsOne("FacilityService.Core.Domain.Entities.TimePeriod", "Friday", b2 =>
                                {
                                    b2.Property<Guid>("ActiveFacilityId")
                                        .HasColumnType("TEXT");

                                    b2.Property<TimeOnly>("HourFrom")
                                        .HasColumnType("TEXT");

                                    b2.Property<TimeOnly>("HourTo")
                                        .HasColumnType("TEXT");

                                    b2.HasKey("ActiveFacilityId");

                                    b2.ToTable("Facilities");

                                    b2.WithOwner()
                                        .HasForeignKey("ActiveFacilityId");
                                });

                            b1.OwnsOne("FacilityService.Core.Domain.Entities.TimePeriod", "Monday", b2 =>
                                {
                                    b2.Property<Guid>("ActiveFacilityId")
                                        .HasColumnType("TEXT");

                                    b2.Property<TimeOnly>("HourFrom")
                                        .HasColumnType("TEXT");

                                    b2.Property<TimeOnly>("HourTo")
                                        .HasColumnType("TEXT");

                                    b2.HasKey("ActiveFacilityId");

                                    b2.ToTable("Facilities");

                                    b2.WithOwner()
                                        .HasForeignKey("ActiveFacilityId");
                                });

                            b1.OwnsOne("FacilityService.Core.Domain.Entities.TimePeriod", "Saturday", b2 =>
                                {
                                    b2.Property<Guid>("ActiveFacilityId")
                                        .HasColumnType("TEXT");

                                    b2.Property<TimeOnly>("HourFrom")
                                        .HasColumnType("TEXT");

                                    b2.Property<TimeOnly>("HourTo")
                                        .HasColumnType("TEXT");

                                    b2.HasKey("ActiveFacilityId");

                                    b2.ToTable("Facilities");

                                    b2.WithOwner()
                                        .HasForeignKey("ActiveFacilityId");
                                });

                            b1.OwnsOne("FacilityService.Core.Domain.Entities.TimePeriod", "Sunday", b2 =>
                                {
                                    b2.Property<Guid>("ActiveFacilityId")
                                        .HasColumnType("TEXT");

                                    b2.Property<TimeOnly>("HourFrom")
                                        .HasColumnType("TEXT");

                                    b2.Property<TimeOnly>("HourTo")
                                        .HasColumnType("TEXT");

                                    b2.HasKey("ActiveFacilityId");

                                    b2.ToTable("Facilities");

                                    b2.WithOwner()
                                        .HasForeignKey("ActiveFacilityId");
                                });

                            b1.OwnsOne("FacilityService.Core.Domain.Entities.TimePeriod", "Thursday", b2 =>
                                {
                                    b2.Property<Guid>("ActiveFacilityId")
                                        .HasColumnType("TEXT");

                                    b2.Property<TimeOnly>("HourFrom")
                                        .HasColumnType("TEXT");

                                    b2.Property<TimeOnly>("HourTo")
                                        .HasColumnType("TEXT");

                                    b2.HasKey("ActiveFacilityId");

                                    b2.ToTable("Facilities");

                                    b2.WithOwner()
                                        .HasForeignKey("ActiveFacilityId");
                                });

                            b1.OwnsOne("FacilityService.Core.Domain.Entities.TimePeriod", "Tuesday", b2 =>
                                {
                                    b2.Property<Guid>("ActiveFacilityId")
                                        .HasColumnType("TEXT");

                                    b2.Property<TimeOnly>("HourFrom")
                                        .HasColumnType("TEXT");

                                    b2.Property<TimeOnly>("HourTo")
                                        .HasColumnType("TEXT");

                                    b2.HasKey("ActiveFacilityId");

                                    b2.ToTable("Facilities");

                                    b2.WithOwner()
                                        .HasForeignKey("ActiveFacilityId");
                                });

                            b1.OwnsOne("FacilityService.Core.Domain.Entities.TimePeriod", "Wednesday", b2 =>
                                {
                                    b2.Property<Guid>("ActiveFacilityId")
                                        .HasColumnType("TEXT");

                                    b2.Property<TimeOnly>("HourFrom")
                                        .HasColumnType("TEXT");

                                    b2.Property<TimeOnly>("HourTo")
                                        .HasColumnType("TEXT");

                                    b2.HasKey("ActiveFacilityId");

                                    b2.ToTable("Facilities");

                                    b2.WithOwner()
                                        .HasForeignKey("ActiveFacilityId");
                                });

                            b1.Navigation("Friday");

                            b1.Navigation("Monday");

                            b1.Navigation("Saturday");

                            b1.Navigation("Sunday");

                            b1.Navigation("Thursday");

                            b1.Navigation("Tuesday");

                            b1.Navigation("Wednesday");
                        });

                    b.OwnsOne("FacilityService.Core.Domain.Entities.Location", "Location", b1 =>
                        {
                            b1.Property<Guid>("FacilityId")
                                .HasColumnType("TEXT");

                            b1.Property<double>("Latitude")
                                .HasColumnType("REAL");

                            b1.Property<double>("Longitude")
                                .HasColumnType("REAL");

                            b1.HasKey("FacilityId");

                            b1.ToTable("Facilities");

                            b1.WithOwner()
                                .HasForeignKey("FacilityId");
                        });

                    b.Navigation("ActiveAt")
                        .IsRequired();

                    b.Navigation("Location")
                        .IsRequired();

                    b.Navigation("ManagerInfo");
                });

            modelBuilder.Entity("FacilityService.Core.Domain.Entities.FacilityPhoto", b =>
                {
                    b.HasOne("FacilityService.Core.Domain.Entities.Facility", "Facility")
                        .WithMany("Photos")
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Facility");
                });

            modelBuilder.Entity("FacilityService.Core.Domain.Entities.ManagerInfo", b =>
                {
                    b.OwnsOne("FacilityService.Core.Domain.Entities.Photo", "BankCardBack", b1 =>
                        {
                            b1.Property<Guid>("ManagerInfoId")
                                .HasColumnType("TEXT");

                            b1.Property<bool>("IsMain")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("PublicId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Url")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.HasKey("ManagerInfoId");

                            b1.ToTable("ManagerInfo");

                            b1.WithOwner()
                                .HasForeignKey("ManagerInfoId");
                        });

                    b.OwnsOne("FacilityService.Core.Domain.Entities.Photo", "BankCardFront", b1 =>
                        {
                            b1.Property<Guid>("ManagerInfoId")
                                .HasColumnType("TEXT");

                            b1.Property<bool>("IsMain")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("PublicId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Url")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.HasKey("ManagerInfoId");

                            b1.ToTable("ManagerInfo");

                            b1.WithOwner()
                                .HasForeignKey("ManagerInfoId");
                        });

                    b.OwnsOne("FacilityService.Core.Domain.Entities.Photo", "CitizenImageBack", b1 =>
                        {
                            b1.Property<Guid>("ManagerInfoId")
                                .HasColumnType("TEXT");

                            b1.Property<bool>("IsMain")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("PublicId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Url")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.HasKey("ManagerInfoId");

                            b1.ToTable("ManagerInfo");

                            b1.WithOwner()
                                .HasForeignKey("ManagerInfoId");
                        });

                    b.OwnsOne("FacilityService.Core.Domain.Entities.Photo", "CitizenImageFront", b1 =>
                        {
                            b1.Property<Guid>("ManagerInfoId")
                                .HasColumnType("TEXT");

                            b1.Property<bool>("IsMain")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("PublicId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Url")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.HasKey("ManagerInfoId");

                            b1.ToTable("ManagerInfo");

                            b1.WithOwner()
                                .HasForeignKey("ManagerInfoId");
                        });

                    b.Navigation("BankCardBack")
                        .IsRequired();

                    b.Navigation("BankCardFront")
                        .IsRequired();

                    b.Navigation("CitizenImageBack")
                        .IsRequired();

                    b.Navigation("CitizenImageFront")
                        .IsRequired();
                });

            modelBuilder.Entity("FacilityService.Core.Domain.Entities.Facility", b =>
                {
                    b.Navigation("Photos");
                });

            modelBuilder.Entity("FacilityService.Core.Domain.Entities.ManagerInfo", b =>
                {
                    b.Navigation("BusinessLicenseImages");
                });
#pragma warning restore 612, 618
        }
    }
}
