// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence;

#nullable disable

namespace Persistence.Migrations;

[DbContext(typeof(DataContext))]
[Migration("20250318150211_InitialCreate")]
partial class InitialCreate
{
    /// <inheritdoc />
    protected override void BuildTargetModel(ModelBuilder modelBuilder)
    {
#pragma warning disable 612, 618
        modelBuilder.HasAnnotation("ProductVersion", "9.0.3");

        modelBuilder.Entity("Domain.Entities.Facility", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("TEXT");

                b.Property<int>("CourtsAmount")
                    .HasColumnType("INTEGER");

                b.Property<DateTime>("CreatedAt")
                    .HasColumnType("TEXT");

                b.Property<string>("Description")
                    .IsRequired()
                    .HasColumnType("TEXT");

                b.Property<string>("DetailAddress")
                    .IsRequired()
                    .HasColumnType("TEXT");

                b.Property<string>("FacebookUrl")
                    .HasColumnType("TEXT");

                b.Property<string>("FacilityName")
                    .IsRequired()
                    .HasColumnType("TEXT");

                b.Property<string>("Location")
                    .IsRequired()
                    .HasColumnType("TEXT");

                b.Property<decimal>("MaxPrice")
                    .HasColumnType("TEXT");

                b.Property<decimal>("MinPrice")
                    .HasColumnType("TEXT");

                b.Property<string>("Policy")
                    .IsRequired()
                    .HasColumnType("TEXT");

                b.Property<float>("RatingAvg")
                    .HasColumnType("REAL");

                b.Property<int>("State")
                    .HasColumnType("INTEGER");

                b.Property<int>("TotalRatings")
                    .HasColumnType("INTEGER");

                b.Property<DateTime>("UpdatedAt")
                    .HasColumnType("TEXT");

                b.HasKey("Id");

                b.ToTable("Facilities");
            });

        modelBuilder.Entity("Domain.Entities.FacilityPhoto", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("TEXT");

                b.Property<Guid>("FacilityId")
                    .HasColumnType("TEXT");

                b.Property<bool>("IsMain")
                    .HasColumnType("INTEGER");

                b.Property<string>("PublicId")
                    .HasColumnType("TEXT");

                b.Property<string>("Url")
                    .IsRequired()
                    .HasColumnType("TEXT");

                b.HasKey("Id");

                b.HasIndex("FacilityId");

                b.ToTable("FacilityPhotos");
            });

        modelBuilder.Entity("Domain.Entities.Role", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("TEXT");

                b.Property<string>("ConcurrencyStamp")
                    .IsConcurrencyToken()
                    .HasColumnType("TEXT");

                b.Property<string>("Name")
                    .HasMaxLength(256)
                    .HasColumnType("TEXT");

                b.Property<string>("NormalizedName")
                    .HasMaxLength(256)
                    .HasColumnType("TEXT");

                b.HasKey("Id");

                b.HasIndex("NormalizedName")
                    .IsUnique()
                    .HasDatabaseName("RoleNameIndex");

                b.ToTable("AspNetRoles", (string)null);
            });

        modelBuilder.Entity("Domain.Entities.User", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("TEXT");

                b.Property<int>("AccessFailedCount")
                    .HasColumnType("INTEGER");

                b.Property<string>("ConcurrencyStamp")
                    .IsConcurrencyToken()
                    .HasColumnType("TEXT");

                b.Property<DateTime>("CreatedAt")
                    .HasColumnType("TEXT");

                b.Property<string>("Email")
                    .HasMaxLength(256)
                    .HasColumnType("TEXT");

                b.Property<bool>("EmailConfirmed")
                    .HasColumnType("INTEGER");

                b.Property<bool>("LockoutEnabled")
                    .HasColumnType("INTEGER");

                b.Property<DateTimeOffset?>("LockoutEnd")
                    .HasColumnType("TEXT");

                b.Property<string>("NormalizedEmail")
                    .HasMaxLength(256)
                    .HasColumnType("TEXT");

                b.Property<string>("NormalizedUserName")
                    .HasMaxLength(256)
                    .HasColumnType("TEXT");

                b.Property<string>("PasswordHash")
                    .HasColumnType("TEXT");

                b.Property<string>("PhoneNumber")
                    .HasColumnType("TEXT");

                b.Property<bool>("PhoneNumberConfirmed")
                    .HasColumnType("INTEGER");

                b.Property<string>("SecurityStamp")
                    .HasColumnType("TEXT");

                b.Property<bool>("TwoFactorEnabled")
                    .HasColumnType("INTEGER");

                b.Property<DateTime>("UpdatedAt")
                    .HasColumnType("TEXT");

                b.Property<string>("UserName")
                    .HasMaxLength(256)
                    .HasColumnType("TEXT");

                b.HasKey("Id");

                b.HasIndex("NormalizedEmail")
                    .HasDatabaseName("EmailIndex");

                b.HasIndex("NormalizedUserName")
                    .IsUnique()
                    .HasDatabaseName("UserNameIndex");

                b.ToTable("AspNetUsers", (string)null);
            });

        modelBuilder.Entity("Domain.Entities.UserPhoto", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("TEXT");

                b.Property<bool>("IsMain")
                    .HasColumnType("INTEGER");

                b.Property<string>("PublicId")
                    .HasColumnType("TEXT");

                b.Property<string>("Url")
                    .IsRequired()
                    .HasColumnType("TEXT");

                b.Property<Guid>("UserId")
                    .HasColumnType("TEXT");

                b.HasKey("Id");

                b.HasIndex("UserId");

                b.ToTable("UserPhotos");
            });

        modelBuilder.Entity("Domain.Entities.UserRole", b =>
            {
                b.Property<Guid>("UserId")
                    .HasColumnType("TEXT");

                b.Property<Guid>("RoleId")
                    .HasColumnType("TEXT");

                b.HasKey("UserId", "RoleId");

                b.HasIndex("RoleId");

                b.ToTable("AspNetUserRoles", (string)null);
            });

        modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("INTEGER");

                b.Property<string>("ClaimType")
                    .HasColumnType("TEXT");

                b.Property<string>("ClaimValue")
                    .HasColumnType("TEXT");

                b.Property<Guid>("RoleId")
                    .HasColumnType("TEXT");

                b.HasKey("Id");

                b.HasIndex("RoleId");

                b.ToTable("AspNetRoleClaims", (string)null);
            });

        modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
            {
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("INTEGER");

                b.Property<string>("ClaimType")
                    .HasColumnType("TEXT");

                b.Property<string>("ClaimValue")
                    .HasColumnType("TEXT");

                b.Property<Guid>("UserId")
                    .HasColumnType("TEXT");

                b.HasKey("Id");

                b.HasIndex("UserId");

                b.ToTable("AspNetUserClaims", (string)null);
            });

        modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
            {
                b.Property<string>("LoginProvider")
                    .HasColumnType("TEXT");

                b.Property<string>("ProviderKey")
                    .HasColumnType("TEXT");

                b.Property<string>("ProviderDisplayName")
                    .HasColumnType("TEXT");

                b.Property<Guid>("UserId")
                    .HasColumnType("TEXT");

                b.HasKey("LoginProvider", "ProviderKey");

                b.HasIndex("UserId");

                b.ToTable("AspNetUserLogins", (string)null);
            });

        modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
            {
                b.Property<Guid>("UserId")
                    .HasColumnType("TEXT");

                b.Property<string>("LoginProvider")
                    .HasColumnType("TEXT");

                b.Property<string>("Name")
                    .HasColumnType("TEXT");

                b.Property<string>("Value")
                    .HasColumnType("TEXT");

                b.HasKey("UserId", "LoginProvider", "Name");

                b.ToTable("AspNetUserTokens", (string)null);
            });

        modelBuilder.Entity("Domain.Entities.Facility", b =>
            {
                b.OwnsOne("Domain.Entities.Active", "ActiveAt", b1 =>
                    {
                        b1.Property<Guid>("FacilityId")
                            .HasColumnType("TEXT");

                        b1.HasKey("FacilityId");

                        b1.ToTable("Facilities");

                        b1.WithOwner()
                            .HasForeignKey("FacilityId");

                        b1.OwnsOne("Domain.Entities.TimePeriod", "Friday", b2 =>
                            {
                                b2.Property<Guid>("ActiveFacilityId")
                                    .HasColumnType("TEXT");

                                b2.Property<TimeOnly>("HourFrom")
                                    .HasColumnType("TEXT");

                                b2.Property<TimeOnly>("HourTo")
                                    .HasColumnType("TEXT");

                                b2.HasKey("ActiveFacilityId");

                                b2.ToTable("Facilities");

                                b2.WithOwner()
                                    .HasForeignKey("ActiveFacilityId");
                            });

                        b1.OwnsOne("Domain.Entities.TimePeriod", "Monday", b2 =>
                            {
                                b2.Property<Guid>("ActiveFacilityId")
                                    .HasColumnType("TEXT");

                                b2.Property<TimeOnly>("HourFrom")
                                    .HasColumnType("TEXT");

                                b2.Property<TimeOnly>("HourTo")
                                    .HasColumnType("TEXT");

                                b2.HasKey("ActiveFacilityId");

                                b2.ToTable("Facilities");

                                b2.WithOwner()
                                    .HasForeignKey("ActiveFacilityId");
                            });

                        b1.OwnsOne("Domain.Entities.TimePeriod", "Saturday", b2 =>
                            {
                                b2.Property<Guid>("ActiveFacilityId")
                                    .HasColumnType("TEXT");

                                b2.Property<TimeOnly>("HourFrom")
                                    .HasColumnType("TEXT");

                                b2.Property<TimeOnly>("HourTo")
                                    .HasColumnType("TEXT");

                                b2.HasKey("ActiveFacilityId");

                                b2.ToTable("Facilities");

                                b2.WithOwner()
                                    .HasForeignKey("ActiveFacilityId");
                            });

                        b1.OwnsOne("Domain.Entities.TimePeriod", "Sunday", b2 =>
                            {
                                b2.Property<Guid>("ActiveFacilityId")
                                    .HasColumnType("TEXT");

                                b2.Property<TimeOnly>("HourFrom")
                                    .HasColumnType("TEXT");

                                b2.Property<TimeOnly>("HourTo")
                                    .HasColumnType("TEXT");

                                b2.HasKey("ActiveFacilityId");

                                b2.ToTable("Facilities");

                                b2.WithOwner()
                                    .HasForeignKey("ActiveFacilityId");
                            });

                        b1.OwnsOne("Domain.Entities.TimePeriod", "Thursday", b2 =>
                            {
                                b2.Property<Guid>("ActiveFacilityId")
                                    .HasColumnType("TEXT");

                                b2.Property<TimeOnly>("HourFrom")
                                    .HasColumnType("TEXT");

                                b2.Property<TimeOnly>("HourTo")
                                    .HasColumnType("TEXT");

                                b2.HasKey("ActiveFacilityId");

                                b2.ToTable("Facilities");

                                b2.WithOwner()
                                    .HasForeignKey("ActiveFacilityId");
                            });

                        b1.OwnsOne("Domain.Entities.TimePeriod", "Tuesday", b2 =>
                            {
                                b2.Property<Guid>("ActiveFacilityId")
                                    .HasColumnType("TEXT");

                                b2.Property<TimeOnly>("HourFrom")
                                    .HasColumnType("TEXT");

                                b2.Property<TimeOnly>("HourTo")
                                    .HasColumnType("TEXT");

                                b2.HasKey("ActiveFacilityId");

                                b2.ToTable("Facilities");

                                b2.WithOwner()
                                    .HasForeignKey("ActiveFacilityId");
                            });

                        b1.OwnsOne("Domain.Entities.TimePeriod", "Wednesday", b2 =>
                            {
                                b2.Property<Guid>("ActiveFacilityId")
                                    .HasColumnType("TEXT");

                                b2.Property<TimeOnly>("HourFrom")
                                    .HasColumnType("TEXT");

                                b2.Property<TimeOnly>("HourTo")
                                    .HasColumnType("TEXT");

                                b2.HasKey("ActiveFacilityId");

                                b2.ToTable("Facilities");

                                b2.WithOwner()
                                    .HasForeignKey("ActiveFacilityId");
                            });

                        b1.Navigation("Friday");

                        b1.Navigation("Monday");

                        b1.Navigation("Saturday");

                        b1.Navigation("Sunday");

                        b1.Navigation("Thursday");

                        b1.Navigation("Tuesday");

                        b1.Navigation("Wednesday");
                    });

                b.OwnsOne("Domain.Entities.ManagerInfo", "ManagerInfo", b1 =>
                    {
                        b1.Property<Guid>("FacilityId")
                            .HasColumnType("TEXT");

                        b1.Property<string>("CitizenId")
                            .IsRequired()
                            .HasColumnType("TEXT");

                        b1.Property<string>("Email")
                            .IsRequired()
                            .HasColumnType("TEXT");

                        b1.Property<string>("FullName")
                            .IsRequired()
                            .HasColumnType("TEXT");

                        b1.Property<string>("PhoneNumber")
                            .IsRequired()
                            .HasColumnType("TEXT");

                        b1.HasKey("FacilityId");

                        b1.ToTable("Facilities");

                        b1.WithOwner()
                            .HasForeignKey("FacilityId");

                        b1.OwnsOne("Domain.Entities.Photo", "BankCardBack", b2 =>
                            {
                                b2.Property<Guid>("ManagerInfoFacilityId")
                                    .HasColumnType("TEXT");

                                b2.Property<bool>("IsMain")
                                    .HasColumnType("INTEGER");

                                b2.Property<string>("PublicId")
                                    .HasColumnType("TEXT");

                                b2.Property<string>("Url")
                                    .IsRequired()
                                    .HasColumnType("TEXT");

                                b2.HasKey("ManagerInfoFacilityId");

                                b2.ToTable("Facilities");

                                b2.WithOwner()
                                    .HasForeignKey("ManagerInfoFacilityId");
                            });

                        b1.OwnsOne("Domain.Entities.Photo", "BankCardFront", b2 =>
                            {
                                b2.Property<Guid>("ManagerInfoFacilityId")
                                    .HasColumnType("TEXT");

                                b2.Property<bool>("IsMain")
                                    .HasColumnType("INTEGER");

                                b2.Property<string>("PublicId")
                                    .HasColumnType("TEXT");

                                b2.Property<string>("Url")
                                    .IsRequired()
                                    .HasColumnType("TEXT");

                                b2.HasKey("ManagerInfoFacilityId");

                                b2.ToTable("Facilities");

                                b2.WithOwner()
                                    .HasForeignKey("ManagerInfoFacilityId");
                            });

                        b1.OwnsMany("Domain.Entities.Photo", "BusinessLicenseImages", b2 =>
                            {
                                b2.Property<Guid>("ManagerInfoFacilityId")
                                    .HasColumnType("TEXT");

                                b2.Property<int>("Id")
                                    .ValueGeneratedOnAdd()
                                    .HasColumnType("INTEGER");

                                b2.Property<bool>("IsMain")
                                    .HasColumnType("INTEGER");

                                b2.Property<string>("PublicId")
                                    .HasColumnType("TEXT");

                                b2.Property<string>("Url")
                                    .IsRequired()
                                    .HasColumnType("TEXT");

                                b2.HasKey("ManagerInfoFacilityId", "Id");

                                b2.ToTable("Facilities_BusinessLicenseImages");

                                b2.WithOwner()
                                    .HasForeignKey("ManagerInfoFacilityId");
                            });

                        b1.OwnsOne("Domain.Entities.Photo", "CitizenImageBack", b2 =>
                            {
                                b2.Property<Guid>("ManagerInfoFacilityId")
                                    .HasColumnType("TEXT");

                                b2.Property<bool>("IsMain")
                                    .HasColumnType("INTEGER");

                                b2.Property<string>("PublicId")
                                    .HasColumnType("TEXT");

                                b2.Property<string>("Url")
                                    .IsRequired()
                                    .HasColumnType("TEXT");

                                b2.HasKey("ManagerInfoFacilityId");

                                b2.ToTable("Facilities");

                                b2.WithOwner()
                                    .HasForeignKey("ManagerInfoFacilityId");
                            });

                        b1.OwnsOne("Domain.Entities.Photo", "CitizenImageFront", b2 =>
                            {
                                b2.Property<Guid>("ManagerInfoFacilityId")
                                    .HasColumnType("TEXT");

                                b2.Property<bool>("IsMain")
                                    .HasColumnType("INTEGER");

                                b2.Property<string>("PublicId")
                                    .HasColumnType("TEXT");

                                b2.Property<string>("Url")
                                    .IsRequired()
                                    .HasColumnType("TEXT");

                                b2.HasKey("ManagerInfoFacilityId");

                                b2.ToTable("Facilities");

                                b2.WithOwner()
                                    .HasForeignKey("ManagerInfoFacilityId");
                            });

                        b1.Navigation("BankCardBack")
                            .IsRequired();

                        b1.Navigation("BankCardFront")
                            .IsRequired();

                        b1.Navigation("BusinessLicenseImages");

                        b1.Navigation("CitizenImageBack")
                            .IsRequired();

                        b1.Navigation("CitizenImageFront")
                            .IsRequired();
                    });

                b.Navigation("ActiveAt")
                    .IsRequired();

                b.Navigation("ManagerInfo")
                    .IsRequired();
            });

        modelBuilder.Entity("Domain.Entities.FacilityPhoto", b =>
            {
                b.HasOne("Domain.Entities.Facility", "Facility")
                    .WithMany("Photos")
                    .HasForeignKey("FacilityId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("Facility");
            });

        modelBuilder.Entity("Domain.Entities.UserPhoto", b =>
            {
                b.HasOne("Domain.Entities.User", "User")
                    .WithMany("Photos")
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("User");
            });

        modelBuilder.Entity("Domain.Entities.UserRole", b =>
            {
                b.HasOne("Domain.Entities.Role", "Role")
                    .WithMany("UserRoles")
                    .HasForeignKey("RoleId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("Domain.Entities.User", "User")
                    .WithMany("UserRoles")
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("Role");

                b.Navigation("User");
            });

        modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
            {
                b.HasOne("Domain.Entities.Role", null)
                    .WithMany()
                    .HasForeignKey("RoleId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

        modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
            {
                b.HasOne("Domain.Entities.User", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

        modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
            {
                b.HasOne("Domain.Entities.User", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

        modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
            {
                b.HasOne("Domain.Entities.User", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

        modelBuilder.Entity("Domain.Entities.Facility", b =>
            {
                b.Navigation("Photos");
            });

        modelBuilder.Entity("Domain.Entities.Role", b =>
            {
                b.Navigation("UserRoles");
            });

        modelBuilder.Entity("Domain.Entities.User", b =>
            {
                b.Navigation("Photos");

                b.Navigation("UserRoles");
            });
#pragma warning restore 612, 618
    }
}
