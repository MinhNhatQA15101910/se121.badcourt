// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using OrderService.Infrastructure.Persistence;

#nullable disable

namespace OrderService.Infrastructure.Persistence.Migrations;

[DbContext(typeof(DataContext))]
[Migration("20250708150959_SqlInitial")]
partial class SqlInitial
{
    /// <inheritdoc />
    protected override void BuildTargetModel(ModelBuilder modelBuilder)
    {
#pragma warning disable 612, 618
        modelBuilder
            .HasAnnotation("ProductVersion", "9.0.4")
            .HasAnnotation("Relational:MaxIdentifierLength", 63);

        NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

        modelBuilder.Entity("OrderService.Core.Domain.Entities.Order", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uuid");

                b.Property<string>("Address")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("CourtId")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("CourtName")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<DateTime>("CreatedAt")
                    .HasColumnType("timestamp with time zone");

                b.Property<string>("FacilityId")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("FacilityName")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("FacilityOwnerId")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("ImageUrl")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("PaymentIntentId")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<decimal>("Price")
                    .HasColumnType("numeric");

                b.Property<string>("Province")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<Guid?>("RatingId")
                    .HasColumnType("uuid");

                b.Property<string>("State")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<DateTime>("UpdatedAt")
                    .HasColumnType("timestamp with time zone");

                b.Property<Guid>("UserId")
                    .HasColumnType("uuid");

                b.Property<string>("UserImageUrl")
                    .HasColumnType("text");

                b.Property<string>("Username")
                    .IsRequired()
                    .HasColumnType("text");

                b.HasKey("Id");

                b.HasIndex("RatingId");

                b.ToTable("Orders");
            });

        modelBuilder.Entity("OrderService.Core.Domain.Entities.Rating", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uuid");

                b.Property<DateTime>("CreatedAt")
                    .HasColumnType("timestamp with time zone");

                b.Property<string>("FacilityId")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<string>("Feedback")
                    .IsRequired()
                    .HasColumnType("text");

                b.Property<int>("Stars")
                    .HasColumnType("integer");

                b.Property<DateTime>("UpdatedAt")
                    .HasColumnType("timestamp with time zone");

                b.Property<Guid>("UserId")
                    .HasColumnType("uuid");

                b.Property<string>("UserImageUrl")
                    .HasColumnType("text");

                b.Property<string>("Username")
                    .IsRequired()
                    .HasColumnType("text");

                b.HasKey("Id");

                b.ToTable("Ratings");
            });

        modelBuilder.Entity("OrderService.Core.Domain.Entities.Order", b =>
            {
                b.HasOne("OrderService.Core.Domain.Entities.Rating", "Rating")
                    .WithMany()
                    .HasForeignKey("RatingId");

                b.OwnsOne("OrderService.Core.Domain.Entities.DateTimePeriod", "DateTimePeriod", b1 =>
                    {
                        b1.Property<Guid>("OrderId")
                            .HasColumnType("uuid");

                        b1.Property<DateTime>("HourFrom")
                            .HasColumnType("timestamp with time zone");

                        b1.Property<DateTime>("HourTo")
                            .HasColumnType("timestamp with time zone");

                        b1.HasKey("OrderId");

                        b1.ToTable("Orders");

                        b1.WithOwner()
                            .HasForeignKey("OrderId");
                    });

                b.Navigation("DateTimePeriod")
                    .IsRequired();

                b.Navigation("Rating");
            });
#pragma warning restore 612, 618
    }
}
